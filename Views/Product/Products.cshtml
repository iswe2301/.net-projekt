<!-- Paket för att kunna använda paginering -->
@using X.PagedList.Mvc.Core
@using X.PagedList

<!-- Använd modellen IPagedList för att kunna använda paginering -->
@model IPagedList<TechStock.Models.Product>

@{
    ViewData["Title"] = "Produkter";
}

<h2>Produkter</h2>

<p class="mb-4 mt-4">
    <a asp-action="Create" class="btn btn-primary"><i class="bi bi-plus-lg"></i> Lägg till produkt</a>
</p>

<!-- Sök och filtrering inom ett formulär -->
<form id="filterForm" asp-action="Products" method="get" class="mb-3">
    <div class="input-group mb-3">
        <!-- Söksträng för produktnamn eller artikelnummer -->
        <input type="text" name="searchString" id="searchInput" class="form-control" placeholder="Sök efter produktnamn eller artikelnummer..."
               value="@(ViewBag.CurrentSearch ?? null)" />
        <button type="submit" class="btn btn-primary"><i class="bi bi-search"></i> Sök</button>
    </div>

    <!-- Filtrering för kategori -->
    <div class="row mb-4 mt-3">
        <div class="col-md-3 mb-3">
            <label for="categoryId">Kategori</label>
            <select name="categoryId" id="categoryId" class="form-select">
                <option value="">Alla kategorier</option>
                <!-- Loopar igenom alla kategorier och skapar en option för varje kategori -->
                @if (ViewData["Categories"] is List<Category> categories)
                {
                        @foreach (var category in categories)
                        {
                            <option value="@category.Id" selected="@(category.Id == ViewBag.CurrentCategory ? "selected" : null)">
                                @category.Name
                            </option>
                    }
            }
            </select>
        </div>

        <div class="col-md-3 mb-3">
            <label for="brandId">Varumärke</label>
            <select name="brandId" id="brandId" class="form-select">
                <option value="">Alla varumärken</option>
                <!-- Loopar igenom alla varumärken och skapar en option för varje varumärke -->
                @if (ViewData["Brands"] is List<Brand> brands)
                {
                        @foreach (var brand in brands)
                    {
                            <option value="@brand.Id" selected="@(brand.Id == ViewBag.CurrentBrand ? "selected" : null)">
                                @brand.Name
                            </option>
                    }
            }
            </select>
        </div>

        <div class="col-md-3 mb-3">
                <label for="stockStatus">Lagerstatus</label>
                <select name="stockStatus" id="stockStatus" class="form-select">
                    <option value="">Alla lagerstatusar</option>
                    <!-- Skapar en option för varje lagerstatus och sätter selected om det är den aktuella lagerstatusen -->
                    <option value="inStock" selected="@(ViewBag.CurrentStockStatus == "inStock" ? "selected" : null)">I lager</option>
                    <option value="lowStock" selected="@(ViewBag.CurrentStockStatus == "lowStock" ? "selected" : null)">Få kvar</option>
                    <option value="outOfStock" selected="@(ViewBag.CurrentStockStatus == "outOfStock" ? "selected" : null)">Slut i lager</option>
                </select>
        </div>

<!-- Återställningsknapp/länk som anropar products-metoden vid klick -->
        <div class="col-md-3 d-flex align-items-end mb-3 mt-3">
            <a href="@Url.Action("Index")" class="btn btn-danger w-100"><i class="bi bi-arrow-counterclockwise"></i> Återställ filtrering</a>
        </div>
    </div>
</form>

<!-- Tabell med alla produkter -->
<div class="table-responsive">
<table class="table table-striped">
    <thead>
        <tr>
             <th>
                <!-- Länk för att sortera efter lagerstatus, hämta ordning från ViewBag -->
                <a asp-action="Products" asp-route-sortOrder="@ViewBag.StockStatusSort">
                    @Html.DisplayNameFor(model => model.First().StockStatus)
                    <!-- Ändra ikon beroende på vilken sortering som används -->
                    <i class="bi @(ViewBag.CurrentSort == "stockstatus_asc" ? "bi-arrow-up" : ViewBag.CurrentSort == "stockstatus_desc" ? "bi-arrow-down" : "bi-arrow-down-up")"></i>
                </a>
            </th>
            <th>
                <a asp-action="Products" asp-route-sortOrder="@ViewBag.ArticleNumberSort">
                    @Html.DisplayNameFor(model => model.First().ArticleNumber)
                    <i class="bi @(ViewBag.CurrentSort == "articlenumber_asc" ? "bi-arrow-up" : ViewBag.CurrentSort == "articlenumber_desc" ? "bi-arrow-down" : "bi-arrow-down-up")"></i>
                </a>
            </th>
            <th>
                <a asp-action="Products" asp-route-sortOrder="@ViewBag.NameSort">
                    @Html.DisplayNameFor(model => model.First().Name)
                    <i class="bi @(ViewBag.CurrentSort == "name_asc" ? "bi-arrow-up" : ViewBag.CurrentSort == "name_desc" ? "bi-arrow-down" : "bi-arrow-down-up")"></i>
                </a>
            </th>
            <th>
                <a asp-action="Products" asp-route-sortOrder="@ViewBag.PriceSort">
                    @Html.DisplayNameFor(model => model.First().Price)
                    <i class="bi @(ViewBag.CurrentSort == "price_asc" ? "bi-arrow-up" : ViewBag.CurrentSort == "price_desc" ? "bi-arrow-down" : "bi-arrow-down-up")"></i>
                </a>
            </th>
            <th>
                <a asp-action="Products" asp-route-sortOrder="@ViewBag.StockQuantitySort">
                    @Html.DisplayNameFor(model => model.First().StockQuantity)
                    <i class="bi @(ViewBag.CurrentSort == "stockquantity_asc" ? "bi-arrow-up" : ViewBag.CurrentSort == "stockquantity_desc" ? "bi-arrow-down" : "bi-arrow-down-up")"></i>
                </a>
            </th>
            <th>
                <a asp-action="Products" asp-route-sortOrder="@ViewBag.CategorySort">
                    @Html.DisplayNameFor(model => model.First().Category.Name)
                    <i class="bi @(ViewBag.CurrentSort == "category_asc" ? "bi-arrow-up" : ViewBag.CurrentSort == "category_desc" ? "bi-arrow-down" : "bi-arrow-down-up")"></i>
                </a>
            </th>
            <th>
                <a asp-action="Products" asp-route-sortOrder="@ViewBag.BrandSort">
                    @Html.DisplayNameFor(model => model.First().Brand.Name)
                    <i class="bi @(ViewBag.CurrentSort == "brand_asc" ? "bi-arrow-up" : ViewBag.CurrentSort == "brand_desc" ? "bi-arrow-down" : "bi-arrow-down-up")"></i>
                </a>
            </th>
            <th>Åtgärder</th>
        </tr>
    </thead>
    <tbody>
        <!-- Meddelande om inga produkter hittades -->
        @if (Model.Count == 0)
        {
                <tr>
                    <td colspan="8" class="text-center mt-4">Inga produkter hittades...</td>
                </tr>
        }
        <!-- Loopar igenom alla produkter och visar dem i tabellen -->
        @foreach (var item in Model)
        {
                    <tr class="product-item" data-name="@item.Name.ToLower()" data-articlenumber="@item.ArticleNumber.ToLower()">
                         <td>
                            <!-- Visa olika badges beroende på lagerstatus -->
                            @if (item.StockStatus == "I lager")
                            {
                                <span class="badge bg-success px-3 py-2" style="width: 115px"><i class="bi bi-check-circle"></i> I lager</span>
                            }
                            else if (item.StockStatus == "Få kvar")
                            {
                                <span class="badge bg-warning px-3 py-2 text-dark" style="width: 115px"><i class="bi bi-exclamation-circle"></i> Få kvar</span>
                            }
                            else if (item.StockStatus == "Slut i lager")
                            {
                                <span class="badge bg-danger px-3 py-2" style="width: 115px"><i class="bi bi-x-circle"></i> Slut i lager</span>
                            }
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ArticleNumber)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Price)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.StockQuantity)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Category.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Brand.Name)
                        </td>
                        <td>
                            <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-warning">
                                <i class="bi bi-pencil-square"></i> Redigera
                            </a>
                            <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-info">
                                <i class="bi bi-info-circle"></i> Detaljer
                            </a>
                            <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-danger">
                                <i class="bi bi-trash"></i> Radera
                            </a>
                        </td>
                    </tr>
            }
        </tbody>
</table>
</div>

<!-- Sidräknare om det finns minst 1 sida -->
@if (Model.Count > 0)
{
        <div class="text-center mb-4 mt-4">
            <strong>Sida @Model.PageNumber av @Model.PageCount</strong>
        </div>
}

<!-- Paginering -->
<div class="d-flex justify-content-center mt-4">
    <!-- Skickar med söksträng och filtrering till pagineringen -->
    @Html.PagedListPager(Model, page => Url.Action("", "produkter", new { sida = page, searchString = Context.Request.Query["searchString"], categoryId = Context.Request.Query["categoryId"], brandId = Context.Request.Query["brandId"], stockStatus = Context.Request.Query["stockStatus"] }),
        new PagedListRenderOptions
        {
                DisplayLinkToFirstPage = PagedListDisplayMode.IfNeeded, // Visa länk till första sidan om det finns fler än 5 sidor
                DisplayLinkToLastPage = PagedListDisplayMode.IfNeeded, // Visa länk till sista sidan om det finns fler än 5 sidor
                DisplayLinkToPreviousPage = PagedListDisplayMode.Always, // Visa alltid länk till föregående sida
                DisplayLinkToNextPage = PagedListDisplayMode.Always, // Visa alltid länk till nästa sida
                MaximumPageNumbersToDisplay = 5, // Max antal sidnummer som visas
                Display = PagedListDisplayMode.IfNeeded, // Visa paginering om det finns fler än 1 sida
            
                // CSS-klasser
                UlElementClasses = new[] { "pagination" },
                LiElementClasses = new[] { "page-item" },
                PageClasses = new[] { "page-link" },

                // Text för länkar
                LinkToPreviousPageFormat = "<i class='bi bi-chevron-left'></i> Föregående",
                LinkToNextPageFormat = "Nästa <i class='bi bi-chevron-right'></i>",
                LinkToFirstPageFormat = "<i class='bi bi-chevron-double-left'></i> Första",
                LinkToLastPageFormat = "Sista <i class='bi bi-chevron-double-right'></i>"
        })
</div>